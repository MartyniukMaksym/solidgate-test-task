plugins {
    id 'java'
    id "io.qameta.allure" version "2.10.0"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.qameta.allure:allure-rest-assured:2.19.0'
    implementation 'io.qameta.allure:allure-testng:2.19.0'
    implementation 'io.qameta.allure:allure-java-commons:2.19.0'
    implementation 'io.rest-assured:rest-assured:5.1.1'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    runtimeOnly 'org.aspectj:aspectjweaver:1.9.9.1'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'org.testng:testng:7.6.1'
    implementation group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version: '1.15'
    implementation group: 'com.google.guava', name: 'guava', version: '33.2.1-jre'
    implementation 'com.codeborne:selenide:6.19.1'
}

test {
    useTestNG()
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

allure {
    version = '2.18.1'
    autoconfigure = true
}

task allTests(type: Test) {
    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/resources/allTests.xml'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}